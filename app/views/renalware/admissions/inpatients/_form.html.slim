= content_for(:javascript)
  javascript:
    $(document).ready(function() {
      function replaceOptionsInWardDropdown(data) {
        var $select = $('#admissions_inpatient_hospital_ward_id');
        $select.html("<option />");
        if (data != undefined) {
          $.each(data, function(index, hash) {
            $select.append($('<option />', { value: hash["id"], text: hash["name"] }));
          });
        }
      };

      $(document).on('change', '#admissions_inpatient_hospital_unit_id', function(evt) {
        var wardsUrl = $("option:selected", this).data("wards-url");
        if (wardsUrl == undefined) {
          replaceOptionsInWardDropdown(undefined);
        } else {
          var jqxhr = $.getJSON(wardsUrl)
            .done(function(data) {
              replaceOptionsInWardDropdown(data);
            })
            .fail(function(error, a, b) {
              console.log( "error", a, b);
            })
        }
        return true;
      })
    });

= render "renalware/shared/errors", model: inpatient
= simple_form_for(inpatient,
                  html: { autocomplete: "off" },
                  wrapper: :horizontal_form) do |f|

  / Note the shenanigans to get the select2 to redisplay the patient after a validation error
  / or on an edit. Selected: 1 means just select the option at index 1 - option at index 0 is always
  / the  blank option. Selecting index 1 fails silently if there is nothing there (no patient
  / selected yet) otherwise it will display the selected patient who will always be
  / at option index 1.
  = f.input :patient_id,
            wrapper: :horizontal_medium,
            collection: [[inpatient.patient&.to_s, inpatient.patient&.id]],
            selected: 1,
            input_html: {\
              class: "patient-id-select2 patient-ajax-search",
              data: { "ajax--url" => search_patients_path(format: :json),
                      placeholder: "Search by patient name or hospital/NHS no." }\
            }

  / Because simple form doesn't easily allow to add data attributes to select options
  / (without us wrapping a rails f.select and thus loosing a bunch of formatting and support for
  / .error classes etc.), we use a custom select_container input which allows us to build a custom
  / options collection and pass it in.
  / Credit to https://stackoverflow.com/questions/17554748/how-do-i-add-html-attributes-to-select-
  / options-with-simple-form-rails#answer-34827962
  ruby:
    options_html = capture do
      Renalware::Hospitals::Unit.select(:id, :unit_code).all.map do |unit|
        concat(content_tag(:option,
                           value: unit.id,
                           selected: unit.id == inpatient.hospital_unit_id,
                           "data-wards-url" => hospitals_unit_wards_url(unit, format: :json)) { unit.unit_code })
      end
    end

  = f.input :hospital_unit_id,
            as: :select_container,
            options_html: options_html,
            include_blank: true,
            wrapper: :horizontal_medium

  = f.association :hospital_ward,
                 collection: Renalware::Hospitals::Ward.where(hospital_unit_id: inpatient.hospital_unit_id),
                 wrapper: :horizontal_medium
  = f.input :admitted_on, as: :date_picker, wrapper: :horizontal_datepicker
  = f.input :admission_type, wrapper: :horizontal_medium
  = f.input :consultant, wrapper: :horizontal_medium
  = f.input :reason_for_admission, wrapper: :horizontal_large, input_html: { rows: 1 }
  = f.input :transferred_on, as: :date_picker, wrapper: :horizontal_datepicker
  = f.input :transferred_to, wrapper: :horizontal_medium
  = f.input :notes, wrapper: :horizontal_large, input_html: { rows: 3 }
  = f.input :discharged_on, as: :date_picker, wrapper: :horizontal_datepicker
  = f.input :discharge_destination, include_blank: "Please select", wrapper: :horizontal_small
  = f.input :destination_notes, wrapper: :horizontal_medium
  = f.association :summarised_by,
                  as: :user_picker,
                  collection: Renalware::User.ordered,
                  wrapper: :horizontal_medium
  = f.input :summarised_on, as: :date_picker, wrapper: :horizontal_datepicker
  = f.input :discharge_summary, wrapper: :horizontal_large, input_html: { rows: 20 }

  = f.submit class: :button
  span= " or "
  = link_to "Cancel", admissions_inpatients_path
